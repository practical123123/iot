 ---------------------------------------
PRACTICAL 1
 
Q1. Write a PHP code to find the greater of 2 numbers. Accept the no. from the user.

<html>
<head>
<title>Greater Number</title>
</head>
<body>
<form method="post" action="6306_greater.php">

Enter the first number:<br><br>
<input type="text" name="num1"><br><br>

Enter the second number:<br><br>
<input type="text" name="num2"><br><br>

<input type="submit" name="submit">
</body>

<?php
      if(isset($_POST["submit"])){
      $n1=$_POST["num1"];
      $n2=$_POST["num2"];
      echo"<br> <br>";
      if($n1>$n2)
      {
        echo"$n1 is greater than $n2";
      }
      else
      {
       echo"$n2 is greater than $n1"; 
      }
      }

?>



Q2. Write a PHP program to accept a number from the user and print whether it is prime or not.

<html>
<head>
<title>Prime number</title>
</head>
<body>
<form method="POST" action="6306_Prime.php">

Enter the Number:
<input type="text" name="number"><br>
<input type="submit" name="submit"><br>

</form>
</body>
</html>

  <?php
if($_POST)
 { 
$a=$_POST["number"];
$flag=primecheck($a);
if($flag==1)
       echo"prime";
else
       echo"Not prime";
}

function primecheck($number)
 {
if($number==1)
return 0;
for($i=2;$i<=$number/2; $i++)
0
{
if($number % $i==0)
return 0;
}
return 1;
 }











OUTPUT: 

Q3. Write a PHP program to display the following Binary Pyramid:

<?php
$k=1;
     for($i=0;$i<5;$i++)
{
    for($j=0;$j<=$i;$j++)
  {
    if($j%2==0)
   {
      $k=0;
}
else
{
   $k=1;
}
{
echo $k." ";
}
}
echo"<br>";
}
?>




OUTPUT :



---------------------------------------
PRACTICAL 2

     PHP Date and Time, PHP Include, PHP Cookies, PHP Sessions

2.1.1 Write a PHP program to demonstrate different string functions.

<?php
  echo strlen("Amod"); 
  echo"<br>";

  echo strchr("Hello world! world. ","world");
  echo"<br>";

  echo str_replace("world","Amod","hello world");
  echo "<br>";

  echo str_word_count("my name is himanshu Chutiya ");
  echo"<br> <br> <br>";

  echo strpos("I love php , I love php too!","php");
  echo"<br>";

  echo substr_count("Hello world.The world is nice","world");
  echo"<br>";

  echo strtolower("HELLO WORLD!.");
  echo"<br>";

  echo strtoupper("hello world!.");
  echo"<br>";

  echo strcmp("Hello World!","Hello World!");
  echo"<br>";
?>








2.1.2  Write a PHP program to demonstrate different Array functions.


<?php
$cars=array("volvo","BMW","toyota");
echo " i like" .$cars[0] .",".$cars[1]."and" .$cars[2]. ".";
echo "<br> total cars available=".count($cars);
echo "<br>";
$arrlength=count($cars);
for($x=0;$x <$arrlength;$x++)
{
echo $cars[$x];
echo "<br>";
}
$age=array("peter"=>"35","ben"=>"37","joe"=>"43");
echo "peter is " .$age['peter']."years old.";

?>





2.1.3 Foreach using Array

<?php
$array=array("rj1","rj2","rj3","1","2","3");

//count func
$items=count($array);
echo "number of elements in array are $items <br>";

//loop through array
foreach($array as $item){
  echo "<br> $item";
}
echo "<br>";

/* use implode() to join array element into asingle string with"," as a seprator*/
echo implode("#",$array);
echo "<br>";

//max fun()
echo(max($array));
echo "<br>";

//min() func
echo(min($array));
echo "<br>";

//sort an array
$sortedArray=$array;
sort($sortedArray);

//loop through sorted array
foreach($sortedArray as $item){
  echo $item. "\n";
}
?>

2.2   Write a PHP program to demonstrate Date and Time function and Include statement.


Code : 

 <?php
echo "----Date Function----<br>";
echo "Today's date in various formats :"."<br>";
echo date ("d/m/y")."<br>";
echo date ("d-m-y")."<br>";
echo date ("d.m.y")."<br>";
echo date ("d.M.Y/D")."<br>";

echo date("h:i:s")."<br>";
echo date("M,d,Y h:i:s A")."<br>";
echo date("h:i a")."<br>";
echo "<br>";

echo "------Time Function------<br>";
echo "<br>";
$s1=time();
echo "Today's Timestamp=$s1 <br>";

$s2=date("d-m-y",$s1);
echo "Today's Date =$s2 <br>";

$s3=date("d-F-y h:i:s",$s1);
echo"Today's Date=$s3 <br>";
?> 




2.3 Write a PHP program to demonstrate use of sessions and cookies.

COOKIES



<?php
setcookie("user", "Rj_College_Admin");
?>
<html>
<body>
<?php
if(!isset($_COOKIE ["user"])){
echo "Sorry, cookie not found!";
}
else
{
echo"<br/>Cookie value: ".$_COOKIE ["user"];
}
?>
</body>
</html>

 

OUTPUT

 








SESSION

<?php
 Session_start();
 if(!isset($_SESSION['counter']))
{
  $_SESSION['counter']=1;
}
else
{
$_SESSION['counter']++;
}
echo ("Page Views: ".$_SESSION['counter']);
?>

 

 
2. 4. Write a PHP program to demonstrate use of filters.

<?php
if($_POST)
{
   $Uname=$_POST["name"];
   $Uage=$_POST["age"];
   $Uemail=$_POST["email"];
   $Uurl=$_POST["url"];


     //validating url 

    if (filter_var($Uurl,FILTER_VALIDATE_URL))
  {
   echo("<br>$Uurl is a vaild URL");
  }
   else
  {
  echo("<br>$Uurl is not a vaild URL");
  }

        //vaildating email
  if(filter_var($Uemail,FILTER_VALIDATE_EMAIL))
 {
   echo("<br>$Uemail is a valid email");
 }
 else
 {
   echo("<br>$Uemail is not a valid email");
 }

  //validating age

 if(filter_var($Uage,FILTER_VALIDATE_INT))
 {
   echo("<br>$Uage is a valid age");
 }
  else
  {
   echo("<br>$Uage is not a valid age");
  }
}
?>

<html>
<head>
  <title> URL Filter </title>
</head>
<body>
<h1> User Details </h1>
<form method="post" action="">

Enter the name :<br><br>
 <input type="text" name="name"><br><br>

Enter the age :<br><br>
<input type="text" name="age"><br><br>

Enter the Email :<br><br>
<input type="text" name="email"><br><br>

Enter URL :<br><br>
<input type="text" name="url"><br><br>

<input type="submit" name="submit" value="Submit Detail"><br<br>
</form>
</body>
</html>


 




2.5  Write  a program to create index.php file which includes menu.php that contains different menus like home,contact us and register

Footer file

<?php
echo "<p> Copyright&copy;1990.".date("Y")."Rjcollege.edu.in</p>";
?>

 








Home file - including footer file

<html>
<body>
 <h1> Welcome to my home page!</h1>
 <p> Some text </p>
 <p> some more text </p>
<?php
 include'6306_footer.php';
?>
</body>
</html>
 
OUTPUT:
 

MENU PAGE


<?php                 
echo '<a href="/homepage.php">Home</a> -
<a href="/html/contact.php">Contact</a> -
<a href="register.php">Register</a>';
?>


 


 







HOME PAGE

<html>
<body>
<div class="menu">
<?php include '6306_menu.php'; ?>
</div>
<h1> welcome to my page !</h1>
<p> i am using php include statment</p>
<p>Thank You </p>
<?Php include '6306_footer.php';?>
</body>
</html> 
 

---------------------------------------
 
PRACTICAL 3

1. Write a PHP program to create a database College and a table Department (Dname,Dno, Number_of_faculty)

DATABASE 

<?php
$host="localhost";
$user= "root";
$pass="";
$conn=mysqli_connect($host, $user, $pass);

//step 1: To establish connection
if(!$conn)
{ 
die("Could not connected: ".mysqli_connect_error());
}
echo "Connected sucessfully <br/>";

//step 2:-database query

$sql_db="CREATE database college"; 
if(mysqli_query($conn, $sql_db))
 {
   echo "Database connected sucessfully.";
}
else
{
echo"Sorry, Database creation failed ".mysqli_error($conn);
}

//step 3:-close connection
mysqli_close($conn);
?>





  

OUTPUT :

 










TABLE CONNECT


<?php
$host= "localhost";
$user="root";
$pass="";
$conn=mysqli_connect($host, $user, $pass, "college");
if(!$conn)
{ 
die("Could not connected: ".mysqli_connect_error());
} 
echo "Connected sucessfully <br/>";

$sql_table="create table department (
                                          Dno int, 
                                          Dname varchar(20) not null, 
                                          no_of_faculty int not null, primary key (Dno)
                                                                             )";
if(mysqli_query($conn, $sql_table))
{ 
echo"Table created sucessfully";
} 
else
{ 
echo"Could not create table: ".mysqli_error($conn);
} 
mysqli_close($conn);
?>

 

OUTPUT:

 


 

INSERT VALUE 

<html>
<head>
<title> Department Details</title>
</head>
<body>
<form action="6306_insert.php" method="POST">

Enter the Department id:
<input type="text" name="did"><br/><br/>

Enter the Department Name:
<input type="text" name="dname"><br/><br/>

Enter the No_Of_Faculty:
<input type="text" name="dfact"><br/><br>

<input type="Submit" name="submit" value="Department details"><br/><br>
</body>
</html>

<?php
if(isset($_POST["submit"]))
 {
                     $dno=$_POST["did"];
                     $dname=$_POST["dname"]; 
                    $dfact=$_POST["dfact"];
                   $conn=mysqli_connect("localhost", "root", "", "college"); 
    if(!$conn)
{
     die("Could not connect: ".mysqli_error()); 
}
    echo"Connected Sucessfully<br>";
$sql_table="insert into department (Dno, Dname, no_of_faculty) values ($dno, ‘$dname', '$dfact')"; 
if(mysqli_query($conn, $sql_table))
{
        echo"Record inserted Sucessfully";
}
else
{ 
        echo "Could not insert recorded: ".mysqli_error($conn);
}
   mysqli_close($conn);
}
 ?>

 

 





OUTPUT:

 

 

 




2) Write a PHP program to create a database named “College”. Create a table named “Student” with following fields (sno, sname, percentage). Insert 3 records of your choice. 

DATABASE

<?php
$host="localhost";
$user= "root";
$pass="";
$conn=mysqli_connect($host, $user, $pass);

//step 1: To establish connection
if(!$conn)
{ 
die("Could not connected: ".mysqli_connect_error());
}
echo "Connected sucessfully <br/>";

//step 2:-database query

$sql_db="CREATE database college"; 
if(mysqli_query($conn, $sql_db))
 {
   echo "Database connected sucessfully.";
}
else
{
echo"Sorry, Database creation failed ".mysqli_error($conn);
}

//step 3:-close connection
mysqli_close($conn);
?>





  

OUTPUT :


 









TABLE CONNECT

<?php
$host="localhost";
$user="root";
$pass="";
$conn=mysqli_connect($host, $user, $pass, "college");
if(!$conn)
{
die("Could not connected: ".mysqli_error());
}
echo"Database Sucessfully connected <br/>";
$sql_table="Create table Students (
                       sno int,  
                       sname varchar(20),
                            percentage decimal (5,2), primary key (sno))"; 
if(mysqli_query($conn, $sql_table))
{
echo "Table create Sucessfully";
}
else
{ echo"table could not created: ".mysqli_error($conn);
}
mysqli_close($conn);
?>

 

OUTPUT:

 
Insert into student table

<html>
<head>
<title> Student Details</title>
</head>
<body>
<form action="6306_student_insert.php" method="POST">

Enter the Student id:
<input type="text" name="sid"><br/><br/>

Enter the Student Name:
<input type="text" name="sname"><br/><br/>

Enter the percentage:
<input type="text" name="percentage"><br/><br>

<input type="Submit" name="submit" value="Student details"><br/><br>
</body>
</html>

<?php
if(isset($_POST["submit"]))
{
      $sno=$_POST["sid"];
     $sname=$_POST["sname"];
    $smarks=$_POST["percentage"];
    $conn=mysqli_connect("localhost", "root", "", "college");
if(!$conn)
{
 die("Could not connect: ".mysqli_error());
}
echo"Connected Sucessfully<br>";
$sql_table="insert into Students (sno, sname, percentage) values (sno, 'sname', 'smarks')"; 
if(mysqli_query($conn, $sql_table))
{
        echo"Record inserted Sucessfully";
}
else
{ 
        echo "Could not insert recorded: ".mysqli_error($conn);
}
   mysqli_close($conn);
}
 ?>



 
 
---------------------------------------
PRACTICAL 4

Q .Write a PHP program to update rows in a table and delete rows from “Student” table.

File name : dbConfig.php

<?php
    $host = "localhost";
    $username = "root";
    $password = "";
    $database = "college";

    // Create  DB Connection
    $conn = mysqli_connect($host, $username, $password, $database);

    // Check connection
    if (!$conn) {
        die("Connection failed: " . mysqli_connect_error());
    }
?>

 


Fetch data from database in PHP MySQ

File Name : index.php

<!Doctype html>
<html lang="en">
<head>
    <title>Fetch Data in PHP  MySQL</title>
</head>
<body>
 <h4>Fetch data from  database in PHP  MySQL</h4>
 <table border=1 width=50%>
 <thead>
 <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Percentage</th>
</tr>
</thead>
<tbody>

<?php
 include('dbconfig.php');
       $query = "SELECT * FROM Students"; 
       $query_run = mysqli_query($conn, $query);
       if(mysqli_num_rows($query_run) > 0)
 {
      foreach($query_run as $row)
{
    ?>
<tr>
          <td><?= $row['sno'] ?> </td>
          <td><?= $row['sname'] ?></td>
           <td><?= $row['percentage'] ?></td>                           	
          <td><a href="student-edit.php?sno=<?=$row['sno']?>">Edit</a> </td>
          <td><a href="student-delete.php?sno=<?=$row['sno']?>">Delete</a> </td>
</tr>
<?php
  }
  }
else
 {
?>
 <tr>
      <td colspan="4">No Record Found</td>
 </tr>
   <?php
 }
    ?>
</tbody>
</table>
</body>
</html>


 




 


 











RECORD DELETE

File Name : student-delete.php

<?php
    include_once 'dbconfig.php';
?>
<!Doctype html>
<html lang="en">
<head>
 <title>Delete record from database in PHP  MySQL</title> 
</head>
<body>
     <h4>Delete record from database in PHP  MySQL</h4>      
<?php
  if(isset($_GET['sno']))
 {
            $student_id = $_GET['sno'];
            $query = " delete FROM Students WHERE sno='$student_id'";
            $result = mysqli_query($conn, $query);
            echo " Record Deleted Successfully...";
}
 ?>              
</body>
</html>


 

OUTPUT:- 

 

BEFORE DELETE

 

AFTER DELETE

 


RECORD EDIT 

<?php
    include_once 'dbconfig.php';
    if(isset($_POST['update_buttton']))
    {    
        $student_id = $_POST['sno'];
        $fullname = $_POST['sname'];
        $percentage = $_POST['percentage'];
$query ="update Students SET sname='$fullname', percentage='$percentage' where sno='$student_id'"; 
        $result = mysqli_query($conn, $query); 
        if($result)
        {
            $message = "Data Updated Successfully!";
        } 
        else
        {
            $message = "Data Not Updated!. Error: " . $sql . "" . mysqli_error($conn);
        }
    }
?>

<!Doctype html>
<html lang="en">
<head>
    <title>Edit & Update data into  database in PHP  MySQL</title>
   
</head>
<body>
         <h4>Edit & Update data into  database in PHP  MySQL</h4>
                 
    <?php
        if(isset($_GET['sno']))
        {
            $student_id = $_GET['sno'];
            $query = " SELECT * FROM Students WHERE sno='$student_id' LIMIT 1";
            $result = mysqli_query($conn, $query);
            if(mysqli_num_rows($result) > 0)
            {
                $row = mysqli_fetch_array($result);
            ?>

   	<form action="" method="POST">
  	<input type="hidden" name="sno" value="<?=$row['sno'];?>" >
 	<label> Name</label>
 	<input type="text" name="sname" value="<?=$row['sname'];?>"  required>
	<label>Percentage</label>
 	<input type="text" name="percentage" value="<?=$row	['percentage'];?>" required>
	<hr/>
	<button type="submit" name="update_buttton">Update 	Data</button>
	</form>
<?php
} 
else
{
	echo "<h4>No Record Found</h4>";
}
}
else
{
      echo "<h4>No ID Found</h4>";
}
?>                
</body>
</html>

 
 

BEFORE EDIT
 
AFTER EDIT

 

 
---------------------------------------

PRACTICAL 5

1. Develop an Angular JS program that allows users to input their first name and last name and display their full name.


<doctype html>
<html>
  <head>
     <title> My First Angularjs Program </title>
     <script
     src="http://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js">
     </script>
     </head>
     <body>
       <div ng-app="">
       <p> Your First Name </p>
       <input typr="text" ng-model="fname"/>
       <p> Your First Last </p>
       <input typr="text" ng-model="lname"/>
       
       <p> Your Name is <span ng-bind="fname"></span>  
        <span ng-bind="lname"></span>
        </p>
        </div>
      </body>
     <html>

 




 
   



2)  Develop a simple AngularJS calculator application that can perform basic mathematical operations (addition,subtraction,multiplication, division) based on user input.

<!doctype html>
<html ng-app="calculatorApp">
<head>
<title> Angular Calculator App </title>
<script 
src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js">
</script>
</head>
<body>

<div ng-controller="calculatorCtrl">
<h2> Simple Calculator </h2>
<input type ="text"ng-model="display"disable>

<div> 
<button ng-click="appendToDisplay('1')">1</button>
<button ng-click="appendToDisplay('2')">2</button>
<button ng-click="appendToDisplay('3')">3</button>
<button ng-click="performOperation('+')">+</button>
</div>

<div> 
<button ng-click="appendToDisplay('4')">4</button>
<button ng-click="appendToDisplay('5')">5</button>
<button ng-click="appendToDisplay('6')">6</button>
<button ng-click="performOperation('-')">-</button>
</div>

<div> 
<button ng-click="appendToDisplay('7')">7</button>
<button ng-click="appendToDisplay('8')">8</button>
<button ng-click="appendToDisplay('9')">9</button>
<button ng-click="performOperation('*')">*</button>
</div>


<div> 
<button ng-click="appendToDisplay('0')">0</button>
<button ng-click="clearDisplay()">C</button>
<button ng-click="calculateResult()">=</button>
<button ng-click="performOperation('/')">/</button>
</div>

</div>

<script>
var app=angular.module('calculatorApp',[]);

app.controller('calculatorCtrl',function($scope){
$scope.display='';

$scope.appendToDisplay=function(value){
$scope.display+=value;
};

$scope.clearDisplay=function(){
$scope.display='';
};

$scope.performOperation=function(operator){
$scope.dispaly+=operator;
};

$scope.calculateResult=function(){
try{
	$scope.display=eval($scope.display);
	}
	catch(error){
	$scope.display='Error';
	}
	};
	});
	</script>
	</body>
	</html>


---------------------------------------

PRACTICAL 6

Q.Write an Angular JS application that displays a list of shopping items. Allow users to add and remove items from the list using directives and controllers.

<!doctype html>
<html ng-app="shoppingListApp">
<head>	
<title>AngularJs Shopping List App</title>
<style>
#shoppingListContainer {
 width:300px;
 margin:auto;
}
ul{
 list-style-type:nonr;
 padding:0;
}

li{
 margin-bottom:10px;
 display:flex;
 justify-content:space-between; 
 align-items:center;
}

input{
 margin-right:10px;
}
</style>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js">
</script>
</head>
<body>

<div ng-controller="shoppingListCtrl"id="shoppingListContainer">
<h2> Shopping List </h2>

<ul>
<li ng-repeat="item in shoppingItems">
 <span>{{item}}</span>
<button ng-click="removeItem($index)">Remove</button>
</li>
</ul>


 <div>
    <label for="newItem">Add New Item:</label>
    <input type="text" id="newItem" ng-model="newItem" placeholder="Enter a new item">
    <button ng-click="addItem()">Add Item</button>
   </div>
  </div>

<script>
 var app=angular.module('shoppingListApp',[]);

 app.controller('shoppingListCtrl',function($scope){
  $scope.shoppingItems=['Sugar','Milk','Flour'];

  $scope.addItem=function(){
   if($scope.newItem){
     $scope.shoppingItems.push($scope.newItem);
     $scope.newItem='';
}
};

$scope.removeItem=function(index){
$scope.shoppingItems.splice(index,1);
}
});
</script>
</body>
</html>
 
 



 

Added Shopping List

 ---------------------------------------
PRACTICAL 7

Q.Write an AngularJS program to create a simple to-do list application. Allow users to add, edit, and delete tasks.

<!Doctype html>
<html ng-app="todoApp">
<head>
 <title>AngularJs TO-DO App </title>
 <script
   src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js">
   </script>
  </head>
  <body ng-controller="todoCtrl">
   <h2> TO-DO List </h2>
   <label for="newTask">Add New Task :</label>
   <input type="text" ng-model="newTask" Placeholder="Enter a task">
   <button ng-click="addTask()"> Add Task </button>
   <br>

   <ul>
      <li ng-repeat="task in tasks">
            {{task}}
             <button ng-click="editTask($index)"> Edit </button>
               <button ng-click="deleteTask($index)"> Delete </button>
      </li>
   </ul>
   <script>

     var app=angular.module('todoApp',[]);
      app.controller('todoCtrl',function ($scope) {
      $scope.tasks =['Task 1' , 'Task 2' ,'Task 3'];
      $scope.addTask =function() {
           if ($scope.newTask){
               $scope.tasks.push($scope.newTask);
               $scope.newTask =''; //clear input after adding task
             }
          };
         $scope.editTask = function (index) {
            var editedTask =prompt('Edit Task :', $scope.tasks[index]);
            if (editedTask !== null) {
                $scope.tasks[index] = editedTask;
               }
            };
            $scope.deleteTask =function(index){
                var confirmDelete =confirm('Are You Sure You Want To Delete This Task ?');
                if(confirmDelete){
                   $scope.tasks.splice(index,1);
                  }
                   };
                    });
                
                </script>
                </body>
                </html>




 

 

OUTPUT :

 







Edit Task 

 

Delete Task 

 

Add Task

 

---------------------------------------

PRACTICAL 8 

Q.8. Write an AngularJS program to create a simple CRUD application (Create, Read, Update, and Delete) for managing users.

<!Doctype html>
<html lang="en" ng-app="crudApp">
<head>
<meta charset="UTF-8">
<title> AngularJS CRUD App</title>
<script 
  Src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.9/angular.min.js">
  </script>
  </head>
  <body>
  <div ng-controller="UserController as userCtrl">
  <h2> User Management </h2>
  <!-- Display Users -->
  <table border="1">
  <tr>
  <th>ID</th>
  <th>Name</th>
  <th>Email</th>
  <th>Actions</th>
  </tr>
<tr ng-repeat="user in userCtrl.users">
<td>{{user.id}}</td>
<td>{{user.name}}</td>
<td>{{user.email}}</td>
<td> 
<button ng-click="userCtrl.editUser(user)">Edit</button>
<button ng-click="userCtrl.deleteUser(user.id)">Delete</button>
</td>
</tr>
</table>
<!--- Add or Edit User  Form --->

<form ng-submit="userCtrl.saveUser()">
<label>ID:</label>
<input type="text"ng-model="userCtrl.currentUser.id" required><br>


<label>Name:</label>
<input type="text"ng-model="userCtrl.currentUser.name" required><br>

<label>Email:</label>
<input type="text"ng-model="userCtrl.currentUser.email" required><br>

<button type="submit">{{userCtrl.isEditing ? 'Update' : 'Add'}} </button>

</form>
</div>

<script>
angular.module('crudApp',[]).controller('UserController',function () { 
var vm= this;
vm.users=[
{ id :1 ,name:'Amod Yadav',email : 'amod98@gmail.com'},
{ id :2 ,name:'Mercy Yadav',email : 'mercy78@gmail.com'} ,
];
vm.currentUser={};
vm.isEditing=false;
vm.editUser=function(user) {
	vm.currentUser=angular.copy(user);
	vm.isEditing=true;
};
vm.saveUser=function() {
	if(vm.isEditing) {
	//update existing user

	var index=vm.users.findIndex(u =>u.id ===vm.currentUser.id);
	vm.users[index]=
	angular.copy(vm.currentUser);
	}
	else
	{

	//add new user
	vm.users.push(angular.copy(vm.currentUser));
	}

	//clear the form and rest flags
	vm.currentUser={};
	vm.isEditing=false;
};

vm.deleteUser=function(userId){
	//Delete user
	var index=vm.users.findIndex(u =>u.id===userId);
	vm.users.splice(index,1);
};
});
</script>
</body>
</html>



 






 

 






OUTPUT :- 

 

Edit
 

Delete

 

Add

 
---------------------------------------
PRACTICAL 9

Q9 .Write a AngularJS program to create a login form, with validation for the username and  password fields.

CODE : 

<!DOCTYPE html>
<html ng-app="loginApp">
<head>
<title>AngularJs Login Form</title>
 <style>
    #loginForm {
      width: 300px;
      margin: auto;
      border: 1px solid #ccc;
      border-radius: 5px;
      padding: 20px;
      margin-top: 20px;
      text-align: center;
    }

    input {
      width: 100%;
      margin-bottom: 10px;
      padding: 5px;
    }

    button {
      background-color: #007bff;
      color: #fff;
      border: none;
      padding: 8px 16px;
      border-radius: 3px;
      cursor: pointer;
    }

    button:hover {
      background-color: #0056b3;
    }

    .error {
      color: #dc3545;
      margin-top: 5px;
    }
  </style>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js">
</script>
</head>
<body>

<div ng-controller="loginCtrl" id="loginForm">
<h2>Login Form </h2>

<form name="loginForm" ng-submit="login()" novalidate>

<div>
<label for="username">Username:</label>
     <input type="text" id="username" name="username" ng-model="username" ng-pattern="/^[a-zA-Z_]{4,}$/" required>
     <div class="error" ng-show="formSubmitted && loginForm.username.$error.required">Username is required.
     </div>
      <div class="error" ng-show="formSubmitted && loginForm.username.$error.pattern">
 Username should contain only alphabets and underscores and be at least 4 characters long.
      </div>
 </div>

<div>
<label for="password">Password:</label>
      <input type="password" id="password" name="password" ng-model="password" ng-minlength="6" required>
      <div class="error" ng-show="formSubmitted && loginForm.password.$error.required">Password is required.
      </div>
      <div class="error" ng-show="formSubmitted && loginForm.password.$error.minlength">
        Password should be at least 6 characters long.
      </div>
    </div>

    <button type="submit">Login</button>
    <div class="error" ng-show="loginFailed">Invalid username or password.
    </div>
  </form>
</div>
<script>
 var app=angular.module('loginApp',[]);

 app.controller('loginCtrl',function ($scope)
 {
   $scope.username="";
   $scope.password="";
   $scope.formSubmitted=false;
   $scope.loginFailed=false;

   // Simulate valid username and password 

   var validUsername ="Amod_Yadav";
   var validPassword="Amodbhai4";

   $scope.login=function()
   {
   $scope.formSubmitted=true;
   console.log('Form validity :',$scope.loginForm.$valid);
   console.log('Username :', $scope.username);
   console.log('Password :', $scope.password);

  if($scope.loginForm.$valid)
  {
  if($scope.username === validUsername && $scope.password === validPassword)
  {

  // Authentication successfull
  console.log('Login successfull !');
  alert('Login successfull !');
  $scope.loginFailed=false;

  }
  else
  {
  //Authentication failed
  console.log('Login failed');
  $scope.loginFailed=true;
  }
  }
else

{
	console.log('Form is invalid');
}
   };

 });
</script>
 </body>
 </html>

 
---------------------------------------

 
PRACTICAL 10

1. Create an AngularJS application to convert student details to Uppercase using  angular filters. 

<!Doctype html>
<html ng-app="studentApp">
<head>
<title>AngularJs Student Detail</title>
<style>
#studentDetails
{
	width :400px;
	margin:auto;
	border-radius:5px;
	padding:20px;
	text-align:center;
}
input
{
	width:100%;
	margin-bottom:10px;
	padding:5px;
}
</style>
<script
   src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js">
</script>
</head>
<body>
	<div ng-controller="studentCtrl" id="studentDetails">
		<h2>Student Detail</h2>
			<label for="StudentName">Name:</label>
			<input type="text"id="studentName"ng-model="name"required>

		    <label for="StudentBranch">Branch:</label>
			<input type="text"id="studentBranch"ng-model="branch"required>

			<p>Uppercase Name:{{name|uppercase}}</p>
			<p>Uppercase Branch:{{branch|uppercase}}</p>
		</div>

		<script>
			var app=angular.module('studentApp',[]);
			app.controller('studentCtrl',function($scope){
				$scope.name="rj college";
				$scope.branch="it";
			});
		</script>
	</body>
</html>

 
 

OUTPUT:

 



2. Create an AngularJS application that displays the date by using date filter  parameters

<!DOCTYPE html>
<html lang="en" ng-app="dateApp">
<head>
    <meta charset="UTF-8">
    <title>AngularJS Date Display</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js">
    </script>
</head>
<body>

    <div ng-controller="DateController">

        <h2>Current Date and Time</h2>
        <p>Default Format: {{ currentDate }}</p>
        <p>Custom Format: {{ currentDate | date:'fullDate' }}</p>
        <p>Time Only: {{ currentDate | date:'shortTime' }}</p>
        <p>Day: {{ currentDate | date:'EEEE' }}</p>
    </div>

    <script>
        var app = angular.module('dateApp', []);
        app.controller('DateController', function($scope, $interval) {
            // Update the date every second
            $interval(function() {
                $scope.currentDate = new Date();
            }, 1000);
        });

    </script>
</body>
</html>



 

 





OUTPUT:

 



<!DOCTYPE html>
<html ng-app="loginApp">
<head>
    <title>AngularJs Login Form</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>
<body>
    <div ng-controller="loginCtrl">
        <h2>Login Form</h2>
        <form name="loginForm" ng-submit="login()" novalidate>
            <div>
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" ng-model="username" ng-pattern="/^[a-zA-Z_]{4,}$/" required>
                <div class="error" ng-show="formSubmitted && loginForm.username.$error.required">Username is required.</div>
                <div class="error" ng-show="formSubmitted && loginForm.username.$error.pattern">
                    Username should contain only alphabets and underscores and be at least 4 characters long.
                </div>
            </div>
            <div>
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" ng-model="password" ng-minlength="6" required>
                <div class="error" ng-show="formSubmitted && loginForm.password.$error.required">Password is required.</div>
                <div class="error" ng-show="formSubmitted && loginForm.password.$error.minlength">Password should be at least 6 characters long.</div>
            </div>
            <button type="submit">Login</button>
            <div class="error" ng-show="loginFailed">Invalid username or password.</div>
        </form>
    </div>

    <script>
        var app = angular.module('loginApp', []);

        app.controller('loginCtrl', function($scope) {
            $scope.formSubmitted = false;
            $scope.loginFailed = false;

            var validUsername = "Amod_Yadav";
            var validPassword = "Amodbhai4";

            $scope.login = function() {
                $scope.formSubmitted = true;
                if ($scope.loginForm.$valid) {
                    if ($scope.username === validUsername && $scope.password === validPassword) {
                        alert('Login successful!');
                        $scope.loginFailed = false;
                    } else {
                        $scope.loginFailed = true;
                    }
                }
            };
        });
    </script>
</body>
</html>

