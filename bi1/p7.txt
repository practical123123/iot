Practical No. 7 
Write a Python program to read data from a CSV file, perform simple data analysis,  and generate basic insights. (Use Pandas is a Python library) 


import numpy as np 
import matplotlib.pyplot as plt  
import pandas as pd 
from sklearn.cluster import KMeans 
dataset = pd.read_csv("Mall_Customers.csv")  
x = dataset.iloc[:, [3, 4]].values 

kmeans = KMeans(n_clusters=5, init='k-means++', max_iter=300, n_init=10,  random_state=0) 
y_kmeans = kmeans.fit_predict(x) 
colors = ['red', 'blue', 'green', 'cyan', 'magenta']  
for i in range(5): 
    plt.scatter(x[y_kmeans == i, 0], x[y_kmeans == i, 1], s=100, c=colors[i], label=f'Cluster {i+1}') 
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='yellow',  label='Centroids') 
plt.title("Clusters and Centroids")  
plt.xlabel("Annual Income (k$)")  
plt.ylabel("Spending Score (1-100)")  
plt.legend() 
plt.show()


KNN


from sklearn.datasets import load_iris 
from sklearn.model_selection import train_test_split  
from sklearn.neighbors import KNeighborsClassifier  
from sklearn.metrics import accuracy_score 
X, y = load_iris(return_X_y=True) 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) 
knn = KNeighborsClassifier(n_neighbors=3)  
knn.fit(X_train, y_train) 

y_pred = knn.predict(X_test) 
print(f'Accuracy: {accuracy_score(y_test, y_pred):.2f}') 
