#simulate number puzzle problem
import numpy as np
import pandas as pd
import os

def bfs(src, target):
    queue = []
    queue.append(src)
    exp = []
    
    while len(queue) > 0:
        source = queue.pop(0)
        exp.append(source)
        print("Current state:", source)
        
        if source == target:
            print("Success")
            return
        
        poss_moves_to_do = possible_moves(source, exp)
        
        for move in poss_moves_to_do:
            if move not in exp and move not in queue:
                queue.append(move)

def possible_moves(state, visited_states):
    # Index of empty spot (0)
    b = state.index(0)
    # Directions array
    d = []
    
    # Add all the possible directions
    if b not in [0, 1, 2]:  # Can move up
        d.append('u')
    if b not in [6, 7, 8]:  # Can move down
        d.append('d')
    if b not in [0, 3, 6]:  # Can move left
        d.append('l')
    if b not in [2, 5, 8]:  # Can move right
        d.append('r')
    
    # If direction is possible then add state to move
    pos_moves_it_can = []
    for i in d:
        pos_moves_it_can.append(gen(state, i, b))
    
    return [move_it_can for move_it_can in pos_moves_it_can if move_it_can not in visited_states]

def gen(state, m, b):
    temp = state.copy()
    if m == 'd':
        temp[b + 3], temp[b] = temp[b], temp[b + 3]  # Move down
    if m == 'u':
        temp[b - 3], temp[b] = temp[b], temp[b - 3]  # Move up
    if m == 'l':
        temp[b - 1], temp[b] = temp[b], temp[b - 1]  # Move left
    if m == 'r':
        temp[b + 1], temp[b] = temp[b], temp[b + 1]  # Move right
    
    # Return new state with tested move to later check if "src == target"
    return temp

# Main logic
src = [1, 2, 3, 4, 5, 6, 0, 7, 8]  # Initial state
target = [1, 2, 3, 4, 5, 6, 7, 8, 0]  # Goal state
bfs(src, target)