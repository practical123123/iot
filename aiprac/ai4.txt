
#astar search 4a

from pyamaze import maze, agent, textLabel
from queue import PriorityQueue

def h(cell1, cell2):
    x1, y1 = cell1
    x2, y2 = cell2
    return abs(x1 - x2) + abs(y1 - y2)

def aStar(m):
    start = (m.rows, m.cols)
    g_score = {cell: float('inf') for cell in m.grid}
    g_score[start] = 0
    f_score = {cell: float('inf') for cell in m.grid}
    f_score[start] = h(start, (1, 1))
    
    open = PriorityQueue()
    open.put((h(start, (1, 1)), h(start, (1, 1)), start))
    
    aPath = {}
    
    while not open.empty():
        currCell = open.get()[2]
        
        if currCell == (1, 1):
            break
        
        for d in 'ESNW':
            if m.maze_map[currCell][d] == True:
                if d == 'E':
                    childCell = (currCell[0], currCell[1] + 1)
                elif d == 'W':
                    childCell = (currCell[0], currCell[1] - 1)
                elif d == 'N':
                    childCell = (currCell[0] - 1, currCell[1])
                elif d == 'S':
                    childCell = (currCell[0] + 1, currCell[1])
                
                temp_g_score = g_score[currCell] + 1
                temp_f_score = temp_g_score + h(childCell, (1, 1))
                
                if temp_f_score < f_score[childCell]:
                    g_score[childCell] = temp_g_score
                    f_score[childCell] = temp_f_score
                    open.put((temp_f_score, h(childCell, (1, 1)), childCell))
                    aPath[childCell] = currCell
    
    fwdPath = {}
    cell = (1, 1)
    while cell != start:
        fwdPath[aPath[cell]] = cell
        cell = aPath[cell
    
    return fwdPath

if __name__ == '__main__':
    m = maze(5, 5)
    m.CreateMaze()
    path = aStar(m)
    a = agent(m, footprints=True)
    m.tracePath({a: path})
    lbl = textLabel(m, 'A Star Path Length', len(path) + 1)
    m.run()





#4b water jug

def pour_water(juga, jugb):
    max1, max2, fill = 5, 7, 4
    print(juga, jugb)

    if juga == fill:
        return
    elif jugb == max2:
        pour_water(0, juga)
    elif juga != 0 and jugb == 0:
        pour_water(0, juga)
    elif juga == fill:
        pour_water(juga, 0)
    elif juga < max1:
        pour_water(max1, juga)
    elif juga < (max2 - jugb):
        pour_water(0, (juga + jugb))
    else:
        pour_water(juga - (max2 - jugb), (max2 - jugb) + jugb)

# Main logic
print("A B")
pour_water(0, 0)

