MAX, MIN = 1000, -1000

def minimax(depth, nodeIndex, maximizingPlayer, values, alpha, beta):
    if depth == 3:
        return values[nodeIndex]
    
    if maximizingPlayer:
        best = MIN
        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i, False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)
            # Alpha Beta Pruning
            if beta <= alpha:
                break
        return best
    else:
        best = MAX
        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i, True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)
            # Alpha Beta Pruning
            if beta <= alpha:
                break
        return best

# Driver Code
if __name__ == "__main__":
    values = [3, 5, 6, 9, 1, 2, 0, -1]
    print("The optimal value is :", minimax(0, 0, True, values, MIN, MAX))






#hill climbinging search
from sys import maxsize
from itertools import permutations

V = 4

# Implementation of Traveling Salesman Problem
def travellingSalesmanProblem(graph, s):
    # Store all vertices apart from the source vertex
    vertex = []
    for i in range(V):
        if i != s:
            vertex.append(i)
    
    min_path = maxsize
    next_permutation = permutations(vertex)
    
    for i in next_permutation:
        current_pathweight = 0
        k = s
        
        for j in i:
            current_pathweight += graph[k][j]
            k = j
        
        current_pathweight += graph[k][s]
        min_path = min(min_path, current_pathweight)
    
    return min_path

# Driver Code
if __name__ == "__main__":
    # Matrix representation of graph
    graph = [[0, 10, 15, 20],
             [10, 0, 35, 25],
             [15, 35, 0, 30],
             [20, 25, 30, 0]]
    s = 0
    print(travellingSalesmanProblem(graph, s))