# Import necessary libraries
from time import sleep
from pyfingerprint.pyfingerprint import PyFingerprint
import RPi.GPIO as gpio

enrol = 31
delet = 35
led = 29
HIGH = 1
LOW = 0

# Disable GPIO warnings and set the GPIO mode
gpio.setwarnings(False)
gpio.setmode(gpio.BCM)

# Setup GPIO pins
gpio.setup(enrol, gpio.IN, pull_up_down=gpio.PUD_UP)
gpio.setup(delet, gpio.IN, pull_up_down=gpio.PUD_UP)
gpio.setup(led, gpio.OUT)

try:
    f = PyFingerprint('/dev/ttyUSB0', 57600, 0xFFFFFFFF, 0x00000000)
    if not f.verifyPassword():
        raise ValueError('The given fingerprint sensor password is wrong!')
except Exception as e:
    print('Exception message: ' + str(e))
    exit(1)

print('Currently used finger templates: ' + str(f.getTemplateCount()) + '/' + str(f.getStorageCapacity()))

def enrollFinger():
    print('Waiting for finger...')
    while not f.readImage():
        pass

    f.convertImage(0x01)
    result = f.searchTemplate()
    positionNumber = result[0]

    if positionNumber >= 0:
        print('Finger already exists at position #' + str(positionNumber))
        time.sleep(2)
        return

    print('Remove finger...')
    time.sleep(2)
    print('Waiting for the same finger again...')

    while not f.readImage():
        pass

    f.convertImage(0x02)

    if f.compareCharacteristics() == 0:
        print("Fingers do not match")
        time.sleep(2)
        return

    f.createTemplate()
    positionNumber = f.storeTemplate()
    print('Finger enrolled successfully!')
    print('New template position #' + str(positionNumber))
    time.sleep(2)

def searchFinger():
    try:
        print('Waiting for finger...')
        while not f.readImage():
            time.sleep(0.5)

        f.convertImage(0x01)
        result = f.searchTemplate()
        positionNumber = result[0]
        accuracyScore = result[1]

        if positionNumber == -1:
            print('No match found!')
            time.sleep(2)
        else:
            print('Found finger at position #' + str(positionNumber))
            time.sleep(2)
    except Exception as e:
        print('Operation failed!')
        print('Exception message: ' + str(e))
        exit(1)

def deleteFinger():
    positionNumber = 0
    count = 0

    while gpio.input(delet):
        positionNumber = input('Please enter the template position you want to delete: ')
        positionNumber = int(positionNumber)

        if f.deleteTemplate(positionNumber):
            print('Template deleted!')
            time.sleep(1)
            print('Currently used finger templates: ' + str(f.getTemplateCount()) + '/' + str(f.getStorageCapacity()))
            time.sleep(1)
            return

    print("Edkits Electronics Welcomes You ")
    time.sleep(3)

flag = 0

while True:
    gpio.output(led, HIGH)

    if gpio.input(enrol) == 0:
        gpio.output(led, LOW)
        enrollFinger()
    elif gpio.input(delet) == 0:
        gpio.output(led, LOW)
        while not gpio.input(delet):
            time.sleep(0.1)
        deleteFinger()
    else:
        searchFinger()
